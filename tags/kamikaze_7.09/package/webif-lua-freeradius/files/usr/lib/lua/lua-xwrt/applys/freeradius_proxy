require("iw-uci")
require("iwuci")

parser = {}
local P = {}
parser = P
-- Import Section:
-- declare everything this package needs from outside
local io = io
local wwwprint = wwwprint
if wwwprint == nil then wwwprint=print end
local oldprint = oldprint
local table = table
local type = type
local string = string
local pairs = pairs
local iwuci = iwuci
local uciClass = uciClass
local tonumber = tonumber

local freeradius = uciClass.new("freeradius")
-- no more external access after this point
setfenv(1, P)

enable    = tonumber(freeradius.webadmin.enable)    or 0
userlevel = tonumber(freeradius.webadmin.userlevel) or 0
reboot    = false                -- reboot device after all apply process

name = "Freeradius"
script = "radiusd"
init_script = "/etc/init.d/radiusd"

function process()
  wwwprint(name.."proxy... Parsers...")
  wwwprint("Committing freeradius_proxy...")
  iwuci.commit("freeradius_proxy")
  wwwprint ("Writing proxy.conf ...")
  local freeradius = uciClass.new("freeradius")
--  if enable == 1 then
  -- Process proxy.conf
    local sep = ""
    local proxy = uciClass.new("freeradius_proxy")
    local proxy_str = "proxy server {\n"
    for i, v in pairs (proxy.server) do
      for k, val in pairs(v.values) do
        proxy_str = proxy_str .. k .."="..val.."\n"
      end
    end

    proxy_str = proxy_str .. "}\n\n"
    if proxy.realm then
    for i, v in pairs (proxy.realm) do
      proxy_str = proxy_str .. "realm "..v.values.community .." {\n"
      for k, val in pairs(v.values) do
        if k ~= "community" then
          if k == "nostrip" then
            proxy_str = proxy_str.."\t".."nostrip\n"
          else
            proxy_str = proxy_str .. "\t"..k.."="..val.."\n"
          end
        end
      end
      proxy_str = proxy_str .. "}\n\n"
    end
    end
    local pepe = io.open("/etc/freeradius/proxy.conf","w")
    pepe:write(proxy_str)
    pepe:close()
--  end
end

return parser
