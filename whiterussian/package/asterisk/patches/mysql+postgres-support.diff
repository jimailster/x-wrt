diff -ruN asterisk-1.0.7-orig/apps/Makefile asterisk-1.0.7-2/apps/Makefile
--- asterisk-1.0.7-orig/apps/Makefile	2004-09-24 23:32:56.000000000 +0200
+++ asterisk-1.0.7-2/apps/Makefile	2005-03-19 17:38:06.000000000 +0100
@@ -79,11 +80,17 @@
 endif
 endif
 
+app_sql_mysql.o: app_sql_mysql.c
+	$(CC) $(CFLAGS) $(MYSQL_CFLAGS) -c -o $@ $<
+
+app_sql_mysql.so: app_sql_mysql.o
+	$(CC) $(SOLINK) -o $@ $< $(LDFLAGS_EXTRA) -lmysqlclient -lz $(MYSQL_LFLAGS) 
+
 app_sql_postgres.o: app_sql_postgres.c
-	$(CC) -pipe -I/usr/local/pgsql/include $(CFLAGS) -c -o app_sql_postgres.o app_sql_postgres.c
+	$(CC) $(CFLAGS) $(PGSQL_CFLAGS) -c -o $@ $<
 
 app_sql_postgres.so: app_sql_postgres.o
-	$(CC) $(SOLINK) -o $@ $< -L/usr/local/pgsql/lib -lpq
+	$(CC) $(SOLINK) -o $@ $< $(LDFLAGS_EXTRA) -lpq -lz $(PGSQL_LFLAGS)
 
 app_sql_odbc.so: app_sql_odbc.o
 	$(CC) $(SOLINK) -o $@ $< -lodbc
diff -ruN asterisk-1.0.7-orig/apps/app_sql_mysql.c asterisk-1.0.7-2/apps/app_sql_mysql.c
--- asterisk-1.0.7-orig/apps/app_sql_mysql.c	1970-01-01 01:00:00.000000000 +0100
+++ asterisk-1.0.7-2/apps/app_sql_mysql.c	2005-03-19 18:01:13.000000000 +0100
@@ -0,0 +1,443 @@
+/*
+ * Asterisk -- A telephony toolkit for Linux.
+ *
+ * Connect to PostgreSQL
+ * 
+ * Copyright (C) 2004, Constantine Filin and Christos Ricudis
+ *
+ * Christos Ricudis <ricudis@itc.auth.gr>
+ * Constantine Filin <cf@intermedia.net>
+ *
+ * This program is free software, distributed under the terms of
+ * the GNU General Public License
+ */
+
+#include <asterisk/file.h>
+#include <asterisk/logger.h>
+#include <asterisk/channel.h>
+#include <asterisk/pbx.h>
+#include <asterisk/module.h>
+#include <asterisk/linkedlists.h>
+#include <asterisk/chanvars.h>
+#include <asterisk/lock.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <stdio.h>
+#include <unistd.h>
+
+#include <mysql/mysql.h>
+
+#define EXTRA_LOG 0
+
+static char *tdesc = "Simple Mysql Interface";
+
+static char *app = "MYSQL";
+
+static char *synopsis = "Do several mySQLy things";
+
+static char *descrip = 
+"MYSQL():  Do several mySQLy things\n"
+"Syntax:\n"
+"  MYSQL(Connect connid dhhost dbuser dbpass dbname)\n"
+"    Connects to a database.  Arguments contain standard MySQL parameters\n"
+"    passed to function mysql_real_connect.  Connection identifer returned\n"
+"    in ${var}\n"
+"  MYSQL(Query resultid ${connid} query-string)\n"
+"    Executes standard MySQL query contained in query-string using established\n"
+"    connection identified by ${connection_identifier}. Result of query is\n"
+"    is stored in ${var}.\n"
+"  MYSQL(Fetch fetchid ${resultid} var1 var2 ... varN)\n"
+"    Fetches a single row from a result set contained in ${result_identifier}.\n"
+"    Assigns returned fields to ${var1} ... ${varn}.  ${fetchid} is set TRUE\n"
+"    if additional rows exist in result set.\n"
+"  MYSQL(Clear ${resultid})\n"
+"    Frees memory and datastructures associated with result set.\n" 
+"  MYSQL(Disconnect ${connid})\n"
+"    Disconnects from named connection to MySQL.\n" ;
+
+/*	
+EXAMPLES OF USE : 
+
+exten => s,2,MYSQL(Connect connid localhost asterisk mypass credit)
+exten => s,3,MYSQL(Query resultid ${connid} SELECT username,credit FROM credit WHERE callerid=${CALLERIDNUM})
+exten => s,4,MYSQL(Fetch fetchid ${resultid} datavar1 datavar2)
+exten => s,5,GotoIf(${fetchid}?6:8)
+exten => s,6,Festival("User ${datavar1} currently has credit balance of ${datavar2} dollars.")	
+exten => s,7,Goto(s,4)
+exten => s,8,MYSQL(Clear ${resultid})
+exten => s,9,MYSQL(Disconnect ${connid})
+*/
+
+STANDARD_LOCAL_USER;
+LOCAL_USER_DECL;
+
+AST_MUTEX_DEFINE_STATIC(_mysql_mutex);
+
+extern void pbx_builtin_setvar_helper(struct ast_channel *chan, char *name, char *value); 
+
+#define AST_MYSQL_ID_DUMMY   0
+#define AST_MYSQL_ID_CONNID  1
+#define AST_MYSQL_ID_RESID   2
+#define AST_MYSQL_ID_FETCHID 3
+
+struct ast_MYSQL_id {
+	int identifier_type; /* 0=dummy, 1=connid, 2=resultid */
+	int identifier;
+	void *data;
+	AST_LIST_ENTRY(ast_MYSQL_id) entries;
+} *ast_MYSQL_id;
+
+AST_LIST_HEAD(MYSQLidshead,ast_MYSQL_id) _mysql_ids_head;
+
+/* helpful procs */
+static void *find_identifier(int identifier,int identifier_type) {
+	struct MYSQLidshead *headp;
+	struct ast_MYSQL_id *i;
+	void *res=NULL;
+	int found=0;
+	
+	headp=&_mysql_ids_head;
+	
+	if (AST_LIST_LOCK(headp)) {
+		ast_log(LOG_WARNING,"Unable to lock identifiers list\n");
+	} else {
+		AST_LIST_TRAVERSE(headp,i,entries) {
+			if ((i->identifier==identifier) && (i->identifier_type==identifier_type)) {
+				found=1;
+				res=i->data;
+				break;
+			}
+		}
+		if (!found) {
+			ast_log(LOG_WARNING,"Identifier %d, identifier_type %d not found in identifier list\n",identifier,identifier_type);
+		}
+		AST_LIST_UNLOCK(headp);
+	}
+	
+	return res;
+}
+
+static int add_identifier(int identifier_type,void *data) {
+	struct ast_MYSQL_id *i,*j;
+	struct MYSQLidshead *headp;
+	int maxidentifier=0;
+	
+	headp=&_mysql_ids_head;
+	i=NULL;
+	j=NULL;
+	
+	if (AST_LIST_LOCK(headp)) {
+		ast_log(LOG_WARNING,"Unable to lock identifiers list\n");
+		return(-1);
+	} else {
+ 		i=malloc(sizeof(struct ast_MYSQL_id));
+		AST_LIST_TRAVERSE(headp,j,entries) {
+			if (j->identifier>maxidentifier) {
+				maxidentifier=j->identifier;
+			}
+		}
+		i->identifier=maxidentifier+1;
+		i->identifier_type=identifier_type;
+		i->data=data;
+		AST_LIST_INSERT_HEAD(headp,i,entries);
+		AST_LIST_UNLOCK(headp);
+	}
+	return i->identifier;
+}
+
+static int del_identifier(int identifier,int identifier_type) {
+	struct ast_MYSQL_id *i;
+	struct MYSQLidshead *headp;
+	int found=0;
+	
+        headp=&_mysql_ids_head;
+        
+        if (AST_LIST_LOCK(headp)) {
+		ast_log(LOG_WARNING,"Unable to lock identifiers list\n");
+	} else {
+		AST_LIST_TRAVERSE(headp,i,entries) {
+			if ((i->identifier==identifier) && 
+			    (i->identifier_type==identifier_type)) {
+				AST_LIST_REMOVE(headp,i,ast_MYSQL_id,entries);
+				free(i);
+				found=1;
+				break;
+			}
+		}
+		AST_LIST_UNLOCK(headp);
+	}
+	                
+	if (found==0) {
+		ast_log(LOG_WARNING,"Could not find identifier %d, identifier_type %d in list to delete\n",identifier,identifier_type);
+		return(-1);
+	} else {
+		return(0);
+	}
+}
+
+static int set_asterisk_int(struct ast_channel *chan, char *varname, int id) {
+	if( id>=0 ) {
+		char s[100] = "";
+		snprintf(s, sizeof(s)-1, "%d", id);
+#if EXTRA_LOG
+		ast_log(LOG_WARNING,"MYSQL: setting var '%s' to value '%s'\n",varname,s);
+#endif
+		pbx_builtin_setvar_helper(chan,varname,s);
+	}
+	return id;
+}
+
+static int add_identifier_and_set_asterisk_int(struct ast_channel *chan, char *varname, int identifier_type, void *data) {
+	return set_asterisk_int(chan,varname,add_identifier(identifier_type,data));
+}
+
+static int safe_scan_int( char** data, char* delim, int def ) {
+	char* end;
+	int res = def;
+	char* s = strsep(data,delim);
+	if( s ) {
+		res = strtol(s,&end,10);
+		if (*end) res = def;  /* not an integer */
+	}
+	return res;
+}
+
+/* MYSQL operations */
+static int aMYSQL_connect(struct ast_channel *chan, char *data) {
+	
+	MYSQL *mysql;
+
+	char *connid_var;
+	char *dbhost;
+	char *dbuser;
+	char *dbpass;
+	char *dbname;
+	 
+	strsep(&data," "); // eat the first token, we already know it :P 
+
+	connid_var=strsep(&data," ");
+	dbhost=strsep(&data," ");
+	dbuser=strsep(&data," ");
+	dbpass=strsep(&data," ");
+	dbname=strsep(&data,"\n");
+	
+	if( connid_var && dbhost && dbuser && dbpass && dbname ) {
+		mysql = mysql_init(NULL);
+		if (mysql) {
+			if (mysql_real_connect(mysql,dbhost,dbuser,dbpass,dbname,0,NULL,0)) {
+				add_identifier_and_set_asterisk_int(chan,connid_var,AST_MYSQL_ID_CONNID,mysql);
+				return 0;
+			}
+			else {
+				ast_log(LOG_WARNING,"mysql_real_connect(mysql,%s,%s,dbpass,%s,...) failed\n",dbhost,dbuser,dbname);
+			}
+		}
+		else {
+			ast_log(LOG_WARNING,"myslq_init returned NULL\n");
+		}
+ 	}
+	else {
+		ast_log(LOG_WARNING,"MYSQL(connect is missing some arguments\n");
+	}
+
+	return -1;
+}
+
+static int aMYSQL_query(struct ast_channel *chan, char *data) {
+	
+	MYSQL       *mysql;
+	MYSQL_RES   *mysqlres;
+
+	char *resultid_var;
+	int connid;
+	char *querystring;
+
+	strsep(&data," "); // eat the first token, we already know it :P 
+
+	resultid_var = strsep(&data," ");
+	connid       = safe_scan_int(&data," ",-1);
+	querystring  = strsep(&data,"\n");
+
+	if (resultid_var && (connid>=0) && querystring) {
+		if ((mysql=find_identifier(connid,AST_MYSQL_ID_CONNID))!=NULL) {
+			mysql_query(mysql,querystring);
+			if ((mysqlres=mysql_use_result(mysql))!=NULL) {
+				add_identifier_and_set_asterisk_int(chan,resultid_var,AST_MYSQL_ID_RESID,mysqlres);
+				return 0;
+			}
+			else if( mysql_field_count(mysql)==0 ) {
+				return 0;  // See http://dev.mysql.com/doc/mysql/en/mysql_field_count.html
+			}
+			else {
+				ast_log(LOG_WARNING,"aMYSQL_query: mysql_store_result() failed on query %s\n",querystring);
+			}
+		}
+		else {
+			ast_log(LOG_WARNING,"aMYSQL_query: Invalid connection identifier %d passed in aMYSQL_query\n",connid);
+		}
+	}
+	else {
+		ast_log(LOG_WARNING,"aMYSQL_query: missing some arguments\n");
+	}
+	
+	return -1;
+}
+
+
+static int aMYSQL_fetch(struct ast_channel *chan, char *data) {
+	
+	MYSQL_RES *mysqlres;
+	MYSQL_ROW mysqlrow;
+
+	char *fetchid_var,*s5,*s6;
+	int resultid,numFields,j;
+	
+	strsep(&data," "); // eat the first token, we already know it :P 
+
+	fetchid_var = strsep(&data," ");
+	resultid    = safe_scan_int(&data," ",-1);
+
+	if (fetchid_var && (resultid>=0) ) {
+		if ((mysqlres=find_identifier(resultid,AST_MYSQL_ID_RESID))!=NULL) {
+			/* Grab the next row */
+			if ((mysqlrow=mysql_fetch_row(mysqlres))!=NULL) {
+				numFields=mysql_num_fields(mysqlres);
+				for (j=0;j<numFields;j++) {
+					s5=strsep(&data," ");
+					if (s5==NULL) {
+						ast_log(LOG_WARNING,"ast_MYSQL_fetch: More fields (%d) than variables (%d)\n",numFields,j);
+						break;
+					}
+					s6=mysqlrow[j];
+					pbx_builtin_setvar_helper(chan,s5, s6 ? s6 : "NULL");
+				}
+#ifdef EXTRA_LOG
+				ast_log(LOG_WARNING,"ast_MYSQL_fetch: numFields=%d\n",numFields);
+#endif
+				set_asterisk_int(chan,fetchid_var,1); // try more rows
+			} else {
+#if EXTRA_LOG
+				ast_log(LOG_WARNING,"ast_MYSQL_fetch : EOF\n");
+#endif
+				set_asterisk_int(chan,fetchid_var,0); // no more rows
+			}
+			return 0;
+		}
+		else {
+			ast_log(LOG_WARNING,"aMYSQL_fetch: Invalid result identifier %d passed\n",resultid);
+		}
+	}
+	else {
+		ast_log(LOG_WARNING,"aMYSQL_fetch: missing some arguments\n");
+	}
+
+	return -1;
+}
+
+static int aMYSQL_clear(struct ast_channel *chan, char *data) {
+
+	MYSQL_RES *mysqlres;
+
+	int id;
+	strsep(&data," "); // eat the first token, we already know it :P 
+	id = safe_scan_int(&data," \n",-1);
+	if ((mysqlres=find_identifier(id,AST_MYSQL_ID_RESID))==NULL) {
+		ast_log(LOG_WARNING,"Invalid result identifier %d passed in aMYSQL_clear\n",id);
+	} else {
+		mysql_free_result(mysqlres);
+		del_identifier(id,AST_MYSQL_ID_RESID);
+	}
+
+	return 0;
+}
+
+static int aMYSQL_disconnect(struct ast_channel *chan, char *data) {
+	
+	MYSQL *mysql;
+	int id;
+	strsep(&data," "); // eat the first token, we already know it :P 
+
+	id = safe_scan_int(&data," \n",-1);
+	if ((mysql=find_identifier(id,AST_MYSQL_ID_CONNID))==NULL) {
+		ast_log(LOG_WARNING,"Invalid connection identifier %d passed in aMYSQL_disconnect\n",id);
+	} else {
+		mysql_close(mysql);
+		del_identifier(id,AST_MYSQL_ID_CONNID);
+	} 
+
+	return 0;
+}
+
+static int MYSQL_exec(struct ast_channel *chan, void *data)
+{
+	struct localuser *u;
+	int result;
+
+#if EXTRA_LOG
+	fprintf(stderr,"MYSQL_exec: data=%s\n",(char*)data);
+#endif
+
+	if (!data) {
+		ast_log(LOG_WARNING, "APP_MYSQL requires an argument (see manual)\n");
+		return -1;
+	}
+
+	LOCAL_USER_ADD(u);
+	result=0;
+
+	ast_mutex_lock(&_mysql_mutex);
+
+	if (strncasecmp("connect",data,strlen("connect"))==0) {
+		result=aMYSQL_connect(chan,ast_strdupa(data));
+	} else 	if (strncasecmp("query",data,strlen("query"))==0) {
+		result=aMYSQL_query(chan,ast_strdupa(data));
+	} else 	if (strncasecmp("fetch",data,strlen("fetch"))==0) {
+		result=aMYSQL_fetch(chan,ast_strdupa(data));
+	} else 	if (strncasecmp("clear",data,strlen("clear"))==0) {
+		result=aMYSQL_clear(chan,ast_strdupa(data));
+	} else 	if (strncasecmp("disconnect",data,strlen("disconnect"))==0) {
+		result=aMYSQL_disconnect(chan,ast_strdupa(data));
+	} else {
+		ast_log(LOG_WARNING, "Unknown argument to MYSQL application : %s\n",(char *)data);
+		result=-1;	
+	}
+		
+	ast_mutex_unlock(&_mysql_mutex);
+
+	LOCAL_USER_REMOVE(u);                                                                                
+	return result;
+
+}
+
+int unload_module(void)
+{
+	STANDARD_HANGUP_LOCALUSERS;
+	return ast_unregister_application(app);
+}
+
+int load_module(void)
+{
+	struct MYSQLidshead *headp = &_mysql_ids_head;
+	AST_LIST_HEAD_INIT(headp);
+	return ast_register_application(app, MYSQL_exec, synopsis, descrip);
+}
+
+char *description(void)
+{
+	return tdesc;
+}
+
+int usecount(void)
+{
+	int res;
+	STANDARD_USECOUNT(res);
+	return res;
+}
+
+char *key()
+{
+	return ASTERISK_GPL_KEY;
+}
diff -ruN asterisk-1.0.7-orig/cdr/Makefile asterisk-1.0.7-2/cdr/Makefile
--- asterisk-1.0.7-orig/cdr/Makefile	2004-08-31 18:33:00.000000000 +0200
+++ asterisk-1.0.7-2/cdr/Makefile	2005-03-19 17:38:06.000000000 +0100
@@ -37,36 +37,36 @@
 #
 # unixODBC stuff...
 #
-MODS+=$(shell if [ -f "/usr/include/odbcinst.h" ]; then echo "cdr_odbc.so"; fi)
-MODS+=$(shell if [ -f "/usr/local/include/odbcinst.h" ]; then echo "cdr_odbc.so"; fi) 
+#MODS+=$(shell if [ -f "/usr/include/odbcinst.h" ]; then echo "cdr_odbc.so"; fi)
+#MODS+=$(shell if [ -f "/usr/local/include/odbcinst.h" ]; then echo "cdr_odbc.so"; fi) 
 
 #
 # FreeTDS stuff...
 #
-MODS+=$(shell if [ -f "/usr/include/tds.h" ]; then echo "cdr_tds.so"; fi)
-MODS+=$(shell if [ -f "/usr/local/include/tds.h" ]; then echo "cdr_tds.so"; fi)
+#MODS+=$(shell if [ -f "/usr/include/tds.h" ]; then echo "cdr_tds.so"; fi)
+#MODS+=$(shell if [ -f "/usr/local/include/tds.h" ]; then echo "cdr_tds.so"; fi)
 
 #
 # PGSQL stuff...  Autoconf anyone??
 #
-MODS+=$(shell if [ -d /usr/local/pgsql/include ] || [ -d /usr/include/pgsql ] || [ -d /usr/local/include/pgsql ] || [ -d /opt/pgsql/include ] || [ -f /usr/include/libpq-fe.h ] ; then echo "cdr_pgsql.so"; fi)
-CFLAGS+=$(shell if [ -d /usr/local/pgsql/include ]; then echo "-I/usr/local/pgsql/include"; fi)
-CFLAGS+=$(shell if [ -d /usr/include/pgsql ]; then echo "-I/usr/include/pgsql"; fi)
-CFLAGS+=$(shell if [ -d /usr/include/postgresql ]; then echo "-I/usr/include/postgresql"; fi)
-CFLAGS+=$(shell if [ -d /usr/local/include/pgsql ]; then echo "-I/usr/local/include/pgsql"; fi)
-CFLAGS+=$(shell if [ -d /opt/pgsql/include ]; then echo "-I/opt/pgsql/include"; fi)
+#MODS+=$(shell if [ -d /usr/local/pgsql/include ] || [ -d /usr/include/pgsql ] || [ -d /usr/local/include/pgsql ] || [ -d /opt/pgsql/include ] || [ -f /usr/include/libpq-fe.h ] ; then echo "cdr_pgsql.so"; fi)
+#CFLAGS+=$(shell if [ -d /usr/local/pgsql/include ]; then echo "-I/usr/local/pgsql/include"; fi)
+#CFLAGS+=$(shell if [ -d /usr/include/pgsql ]; then echo "-I/usr/include/pgsql"; fi)
+#CFLAGS+=$(shell if [ -d /usr/include/postgresql ]; then echo "-I/usr/include/postgresql"; fi)
+#CFLAGS+=$(shell if [ -d /usr/local/include/pgsql ]; then echo "-I/usr/local/include/pgsql"; fi)
+#CFLAGS+=$(shell if [ -d /opt/pgsql/include ]; then echo "-I/opt/pgsql/include"; fi)
 #CFLAGS+=$(shell if [ -f /usr/include/libpq-fe.h ]; then echo "-I/usr/include"; fi)
 MLFLAGS=
-MLFLAGS+=$(shell if [ -d /usr/lib/pgsql ]; then echo "-L/usr/lib/pgsql"; fi)
-MLFLAGS+=$(shell if [ -d /usr/local/pgsql/lib ]; then echo "-L/usr/local/pgsql/lib"; fi)
-MLFLAGS+=$(shell if [ -d /usr/local/lib/pgsql ]; then echo "-L/usr/local/lib/pgsql"; fi)
-MLFLAGS+=$(shell if [ -d /opt/pgsql/lib ]; then echo "-L/opt/pgsql/lib"; fi)
-MLFLAGS+=$(shell if [ -f /usr/lib/libpq.so ]; then echo "-L/usr/lib"; fi)
+#MLFLAGS+=$(shell if [ -d /usr/lib/pgsql ]; then echo "-L/usr/lib/pgsql"; fi)
+#MLFLAGS+=$(shell if [ -d /usr/local/pgsql/lib ]; then echo "-L/usr/local/pgsql/lib"; fi)
+#MLFLAGS+=$(shell if [ -d /usr/local/lib/pgsql ]; then echo "-L/usr/local/lib/pgsql"; fi)
+#MLFLAGS+=$(shell if [ -d /opt/pgsql/lib ]; then echo "-L/opt/pgsql/lib"; fi)
+#MLFLAGS+=$(shell if [ -f /usr/lib/libpq.so ]; then echo "-L/usr/lib"; fi)
 
 #
 # SQLIte stuff...
 #
-MODS+=$(shell if [ -f "/usr/include/sqlite.h" ]; then echo "cdr_sqlite.so"; fi)
+#MODS+=$(shell if [ -f "/usr/include/sqlite.h" ]; then echo "cdr_sqlite.so"; fi)
 
 all: depend $(MODS)
 
@@ -89,8 +89,17 @@
 cdr_tds.so: cdr_tds.o
 	$(CC) $(SOLINK) -o $@ $< -ltds $(MLFLAGS)
 
+cdr_mysql.o: cdr_mysql.c
+	$(CC) $(CFLAGS) $(MYSQL_CFLAGS) -c -o $@ $<
+
+cdr_mysql.so: cdr_mysql.o
+	$(CC) $(SOLINK) -o $@ $< $(LDFLAGS_EXTRA) -lmysqlclient -lz $(MYSQL_LFLAGS)
+
+cdr_pgsql.o: cdr_pgsql.c
+	$(CC) $(CFLAGS) $(PGSQL_CFLAGS) -c -o $@ $<
+
 cdr_pgsql.so: cdr_pgsql.o
-	$(CC) $(SOLINK) -o $@ $< -lpq -lz $(MLFLAGS)
+	$(CC) $(SOLINK) -o $@ $< $(LDFLAGS_EXTRA) -lpq -lz $(PGSQL_LFLAGS)
 
 cdr_sqlite.so: cdr_sqlite.o
 	$(CC) $(SOLINK) -o $@ $< -lsqlite $(MLFLAGS)
diff -ruN asterisk-1.0.7-orig/cdr/cdr_mysql.c asterisk-1.0.7-2/cdr/cdr_mysql.c
--- asterisk-1.0.7-orig/cdr/cdr_mysql.c	1970-01-01 01:00:00.000000000 +0100
+++ asterisk-1.0.7-2/cdr/cdr_mysql.c	2005-03-19 17:46:30.000000000 +0100
@@ -0,0 +1,450 @@
+/*
+ * Asterisk -- A telephony toolkit for Linux.
+ *
+ * MySQL CDR logger 
+ * 
+ * James Sharp <jsharp@psychoses.org>
+ *
+ * Modified August 2003
+ * Tilghman Lesher <asterisk__cdr__cdr_mysql__200308@the-tilghman.com>
+ *
+ * This program is free software, distributed under the terms of
+ * the GNU General Public License.
+ *
+ */
+
+#include <sys/types.h>
+#include <asterisk/config.h>
+#include <asterisk/options.h>
+#include <asterisk/channel.h>
+#include <asterisk/cdr.h>
+#include <asterisk/module.h>
+#include <asterisk/logger.h>
+#include <asterisk/cli.h>
+#include "../asterisk.h"
+
+#include <stdio.h>
+#include <string.h>
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <time.h>
+
+#include <mysql/mysql.h>
+#include <mysql/errmsg.h>
+
+#define DATE_FORMAT "%Y-%m-%d %T"
+
+static char *desc = "MySQL CDR Backend";
+static char *name = "mysql";
+static char *config = "cdr_mysql.conf";
+static char *hostname = NULL, *dbname = NULL, *dbuser = NULL, *password = NULL, *dbsock = NULL, *dbtable = NULL;
+static int hostname_alloc = 0, dbname_alloc = 0, dbuser_alloc = 0, password_alloc = 0, dbsock_alloc = 0, dbtable_alloc = 0;
+static int dbport = 0;
+static int connected = 0;
+static time_t connect_time = 0;
+static int records = 0;
+static int totalrecords = 0;
+static int userfield = 0;
+
+AST_MUTEX_DEFINE_STATIC(mysql_lock);
+
+static MYSQL mysql;
+
+static char cdr_mysql_status_help[] =
+"Usage: cdr mysql status\n"
+"       Shows current connection status for cdr_mysql\n";
+
+static int handle_cdr_mysql_status(int fd, int argc, char *argv[])
+{
+	if (connected) {
+		char status[256], status2[100] = "";
+		int ctime = time(NULL) - connect_time;
+		if (dbport)
+			snprintf(status, 255, "Connected to %s@%s, port %d", dbname, hostname, dbport);
+		else if (dbsock)
+			snprintf(status, 255, "Connected to %s on socket file %s", dbname, dbsock);
+		else
+			snprintf(status, 255, "Connected to %s@%s", dbname, hostname);
+
+		if (dbuser && *dbuser)
+			snprintf(status2, 99, " with username %s", dbuser);
+		if (dbtable && *dbtable)
+			snprintf(status2, 99, " using table %s", dbtable);
+		if (ctime > 31536000) {
+			ast_cli(fd, "%s%s for %d years, %d days, %d hours, %d minutes, %d seconds.\n", status, status2, ctime / 31536000, (ctime % 31536000) / 86400, (ctime % 86400) / 3600, (ctime % 3600) / 60, ctime % 60);
+		} else if (ctime > 86400) {
+			ast_cli(fd, "%s%s for %d days, %d hours, %d minutes, %d seconds.\n", status, status2, ctime / 86400, (ctime % 86400) / 3600, (ctime % 3600) / 60, ctime % 60);
+		} else if (ctime > 3600) {
+			ast_cli(fd, "%s%s for %d hours, %d minutes, %d seconds.\n", status, status2, ctime / 3600, (ctime % 3600) / 60, ctime % 60);
+		} else if (ctime > 60) {
+			ast_cli(fd, "%s%s for %d minutes, %d seconds.\n", status, status2, ctime / 60, ctime % 60);
+		} else {
+			ast_cli(fd, "%s%s for %d seconds.\n", status, status2, ctime);
+		}
+		if (records == totalrecords)
+			ast_cli(fd, "  Wrote %d records since last restart.\n", totalrecords);
+		else
+			ast_cli(fd, "  Wrote %d records since last restart and %d records since last reconnect.\n", totalrecords, records);
+		return RESULT_SUCCESS;
+	} else {
+		ast_cli(fd, "Not currently connected to a MySQL server.\n");
+		return RESULT_FAILURE;
+	}
+}
+
+static struct ast_cli_entry cdr_mysql_status_cli =
+	{ { "cdr", "mysql", "status", NULL },
+	handle_cdr_mysql_status, "Show connection status of cdr_mysql",
+	cdr_mysql_status_help, NULL };
+
+static int mysql_log(struct ast_cdr *cdr)
+{
+	struct tm tm;
+	struct timeval tv;
+	struct localuser *u;
+	char *userfielddata = NULL;
+	char sqlcmd[2048], timestr[128];
+
+	ast_mutex_lock(&mysql_lock);
+
+	memset(sqlcmd,0,2048);
+
+	localtime_r(&cdr->start.tv_sec,&tm);
+	strftime(timestr,128,DATE_FORMAT,&tm);
+
+	if ((!connected) && (hostname || dbsock) && dbuser && password && dbname && dbtable ) {
+		/* Attempt to connect */
+		mysql_init(&mysql);
+		if (mysql_real_connect(&mysql, hostname, dbuser, password, dbname, dbport, dbsock, 0)) {
+			connected = 1;
+			connect_time = time(NULL);
+			records = 0;
+		} else {
+			ast_log(LOG_ERROR, "cdr_mysql: cannot connect to database server %s.  Call will not be logged\n", hostname);
+		}
+	} else {
+		/* Long connection - ping the server */
+		int error;
+		if ((error = mysql_ping(&mysql))) {
+			connected = 0;
+			records = 0;
+			switch (error) {
+				case CR_SERVER_GONE_ERROR:
+					ast_log(LOG_ERROR, "cdr_mysql: Server has gone away\n");
+					break;
+				default:
+					ast_log(LOG_ERROR, "cdr_mysql: Unknown connection error\n");
+			}
+		}
+	}
+
+	if (connected) {
+		char *clid=NULL, *dcontext=NULL, *channel=NULL, *dstchannel=NULL, *lastapp=NULL, *lastdata=NULL;
+#ifdef MYSQL_LOGUNIQUEID
+		char *uniqueid=NULL;
+#endif
+
+		/* Maximum space needed would be if all characters needed to be escaped, plus a trailing NULL */
+		if ((clid = alloca(strlen(cdr->clid) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, clid, cdr->clid, strlen(cdr->clid));
+		if ((dcontext = alloca(strlen(cdr->dcontext) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, dcontext, cdr->dcontext, strlen(cdr->dcontext));
+		if ((channel = alloca(strlen(cdr->channel) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, channel, cdr->channel, strlen(cdr->channel));
+		if ((dstchannel = alloca(strlen(cdr->dstchannel) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, dstchannel, cdr->dstchannel, strlen(cdr->dstchannel));
+		if ((lastapp = alloca(strlen(cdr->lastapp) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, lastapp, cdr->lastapp, strlen(cdr->lastapp));
+		if ((lastdata = alloca(strlen(cdr->lastdata) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, lastdata, cdr->lastdata, strlen(cdr->lastdata));
+#ifdef MYSQL_LOGUNIQUEID
+		if ((uniqueid = alloca(strlen(cdr->uniqueid) * 2 + 1)) != NULL)
+			mysql_real_escape_string(&mysql, uniqueid, cdr->uniqueid, strlen(cdr->uniqueid));
+#endif
+
+		if (userfield && ((userfielddata = alloca(strlen(cdr->userfield) * 2 + 1)) != NULL))
+			mysql_real_escape_string(&mysql, userfielddata, cdr->userfield, strlen(cdr->userfield));		
+
+		/* Check for all alloca failures above at once */
+#ifdef MYSQL_LOGUNIQUEID
+		if ((!clid) || (!dcontext) || (!channel) || (!dstchannel) || (!lastapp) || (!lastdata) || (!uniqueid)) {
+#else
+		if ((!clid) || (!dcontext) || (!channel) || (!dstchannel) || (!lastapp) || (!lastdata)) {
+#endif
+			ast_log(LOG_ERROR, "cdr_mysql:  Out of memory error (insert fails)\n");
+			ast_mutex_unlock(&mysql_lock);
+			return -1;
+		}
+
+		ast_log(LOG_DEBUG,"cdr_mysql: inserting a CDR record.\n");
+
+		if (userfield && userfielddata)
+		{
+#ifdef MYSQL_LOGUNIQUEID
+			sprintf(sqlcmd,"INSERT INTO %s (calldate,clid,src,dst,dcontext,channel,dstchannel,lastapp,lastdata,duration,billsec,disposition,amaflags,accountcode,uniqueid,userfield) VALUES ('%s','%s','%s','%s','%s', '%s','%s','%s','%s',%i,%i,'%s',%i,'%s','%s','%s')",dbtable,timestr,clid,cdr->src, cdr->dst, dcontext,channel, dstchannel, lastapp, lastdata,cdr->duration,cdr->billsec,ast_cdr_disp2str(cdr->disposition),cdr->amaflags, cdr->accountcode, uniqueid, userfielddata);
+#else
+			sprintf(sqlcmd,"INSERT INTO %s (calldate,clid,src,dst,dcontext,channel,dstchannel,lastapp,lastdata,duration,billsec,disposition,amaflags,accountcode,userfield) VALUES ('%s','%s','%s','%s','%s', '%s','%s','%s','%s',%i,%i,'%s',%i,'%s','%s')",dbtable,timestr,clid,cdr->src, cdr->dst, dcontext,channel, dstchannel, lastapp, lastdata,cdr->duration,cdr->billsec,ast_cdr_disp2str(cdr->disposition),cdr->amaflags, cdr->accountcode, userfielddata);
+#endif  
+		}
+		else
+		{
+#ifdef MYSQL_LOGUNIQUEID
+			sprintf(sqlcmd,"INSERT INTO %s (calldate,clid,src,dst,dcontext,channel,dstchannel,lastapp,lastdata,duration,billsec,disposition,amaflags,accountcode,uniqueid) VALUES ('%s','%s','%s','%s','%s', '%s','%s','%s','%s',%i,%i,'%s',%i,'%s','%s')",dbtable,timestr,clid,cdr->src, cdr->dst, dcontext,channel, dstchannel, lastapp, lastdata,cdr->duration,cdr->billsec,ast_cdr_disp2str(cdr->disposition),cdr->amaflags, cdr->accountcode, uniqueid);
+#else
+			sprintf(sqlcmd,"INSERT INTO %s (calldate,clid,src,dst,dcontext,channel,dstchannel,lastapp,lastdata,duration,billsec,disposition,amaflags,accountcode) VALUES ('%s','%s','%s','%s','%s', '%s','%s','%s','%s',%i,%i,'%s',%i,'%s')",dbtable,timestr,clid,cdr->src, cdr->dst, dcontext,channel, dstchannel, lastapp, lastdata,cdr->duration,cdr->billsec,ast_cdr_disp2str(cdr->disposition),cdr->amaflags, cdr->accountcode);
+#endif  
+		}
+		
+		ast_log(LOG_DEBUG,"cdr_mysql: SQL command as follows:  %s\n",sqlcmd);
+	
+		if (mysql_real_query(&mysql,sqlcmd,strlen(sqlcmd))) {
+			ast_log(LOG_ERROR,"Failed to insert into database.");
+			ast_mutex_unlock(&mysql_lock);
+			return -1;
+		} else {
+			records++;
+			totalrecords++;
+		}
+	}
+	ast_mutex_unlock(&mysql_lock);
+	return 0;
+}
+
+char *description(void)
+{
+	return desc;
+}
+
+static int my_unload_module(void)
+{ 
+	ast_cli_unregister(&cdr_mysql_status_cli);
+	if (connected) {
+		mysql_close(&mysql);
+		connected = 0;
+		records = 0;
+	}
+	if (hostname && hostname_alloc) {
+		free(hostname);
+		hostname = NULL;
+		hostname_alloc = 0;
+	}
+	if (dbname && dbname_alloc) {
+		free(dbname);
+		dbname = NULL;
+		dbname_alloc = 0;
+	}
+	if (dbuser && dbuser_alloc) {
+		free(dbuser);
+		dbuser = NULL;
+		dbuser_alloc = 0;
+	}
+	if (dbsock && dbsock_alloc) {
+		free(dbsock);
+		dbsock = NULL;
+		dbsock_alloc = 0;
+	}
+	if (dbtable && dbtable_alloc) {
+		free(dbtable);
+		dbtable = NULL;
+		dbtable_alloc = 0;
+	}
+	if (password && password_alloc) {
+		free(password);
+		password = NULL;
+		password_alloc = 0;
+	}
+	dbport = 0;
+	ast_cdr_unregister(name);
+	return 0;
+}
+
+static int my_load_module(void)
+{
+	int res;
+	struct ast_config *cfg;
+	struct ast_variable *var;
+	char *tmp;
+
+	cfg = ast_config_load(config);
+	if (!cfg) {
+		ast_log(LOG_WARNING, "Unable to load config for mysql CDR's: %s\n", config);
+		return 0;
+	}
+	
+	var = ast_variable_browse(cfg, "global");
+	if (!var) {
+		/* nothing configured */
+		return 0;
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","hostname");
+	if (tmp) {
+		hostname = malloc(strlen(tmp) + 1);
+		if (hostname != NULL) {
+			hostname_alloc = 1;
+			strcpy(hostname,tmp);
+		} else {
+			ast_log(LOG_ERROR,"Out of memory error.\n");
+			return -1;
+		}
+	} else {
+		ast_log(LOG_WARNING,"MySQL server hostname not specified.  Assuming localhost\n");
+		hostname = "localhost";
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","dbname");
+	if (tmp) {
+		dbname = malloc(strlen(tmp) + 1);
+		if (dbname != NULL) {
+			dbname_alloc = 1;
+			strcpy(dbname,tmp);
+		} else {
+			ast_log(LOG_ERROR,"Out of memory error.\n");
+			return -1;
+		}
+	} else {
+		ast_log(LOG_WARNING,"MySQL database not specified.  Assuming asteriskcdrdb\n");
+		dbname = "asteriskcdrdb";
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","user");
+	if (tmp) {
+		dbuser = malloc(strlen(tmp) + 1);
+		if (dbuser != NULL) {
+			dbuser_alloc = 1;
+			strcpy(dbuser,tmp);
+		} else {
+			ast_log(LOG_ERROR,"Out of memory error.\n");
+			return -1;
+		}
+	} else {
+		ast_log(LOG_WARNING,"MySQL database user not specified.  Assuming root\n");
+		dbuser = "root";
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","sock");
+	if (tmp) {
+		dbsock = malloc(strlen(tmp) + 1);
+		if (dbsock != NULL) {
+			dbsock_alloc = 1;
+			strcpy(dbsock,tmp);
+		} else {
+			ast_log(LOG_ERROR,"Out of memory error.\n");
+			return -1;
+		}
+	} else {
+		ast_log(LOG_WARNING,"MySQL database sock file not specified.  Using default\n");
+		dbsock = NULL;
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","table");
+	if (tmp) {
+		dbtable = malloc(strlen(tmp) + 1);
+		if (dbtable != NULL) {
+			dbtable_alloc = 1;
+			strcpy(dbtable,tmp);
+		} else {
+			ast_log(LOG_ERROR,"Out of memory error.\n");
+			return -1;
+		}
+	} else {
+		ast_log(LOG_NOTICE,"MySQL database table not specified.  Assuming \"cdr\"\n");
+		dbtable = "cdr";
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","password");
+	if (tmp) {
+		password = malloc(strlen(tmp) + 1);
+		if (password != NULL) {
+			password_alloc = 1;
+			strcpy(password,tmp);
+		} else {
+			ast_log(LOG_ERROR,"Out of memory error.\n");
+			return -1;
+		}
+	} else {
+		ast_log(LOG_WARNING,"MySQL database password not specified.  Assuming blank\n");
+		password = "";
+	}
+
+	tmp = ast_variable_retrieve(cfg,"global","port");
+	if (tmp) {
+		if (sscanf(tmp,"%d",&dbport) < 1) {
+			ast_log(LOG_WARNING,"Invalid MySQL port number.  Using default\n");
+			dbport = 0;
+		}
+	}
+	
+	tmp = ast_variable_retrieve(cfg,"global","userfield");
+	if (tmp) {
+		if (sscanf(tmp,"%d",&userfield) < 1) {
+			ast_log(LOG_WARNING,"Invalid MySQL configurtation file\n");
+			userfield = 0;
+		}
+	}
+	
+	ast_config_destroy(cfg);
+
+	ast_log(LOG_DEBUG,"cdr_mysql: got hostname of %s\n",hostname);
+	ast_log(LOG_DEBUG,"cdr_mysql: got port of %d\n",dbport);
+	if (dbsock)
+		ast_log(LOG_DEBUG,"cdr_mysql: got sock file of %s\n",dbsock);
+	ast_log(LOG_DEBUG,"cdr_mysql: got user of %s\n",dbuser);
+	ast_log(LOG_DEBUG,"cdr_mysql: got dbname of %s\n",dbname);
+	ast_log(LOG_DEBUG,"cdr_mysql: got password of %s\n",password);
+
+	mysql_init(&mysql);
+
+	if (!mysql_real_connect(&mysql, hostname, dbuser, password, dbname, dbport, dbsock, 0)) {
+		ast_log(LOG_ERROR, "Failed to connect to mysql database %s on %s.\n", dbname, hostname);
+		connected = 0;
+		records = 0;
+	} else {
+		ast_log(LOG_DEBUG,"Successfully connected to MySQL database.\n");
+		connected = 1;
+		records = 0;
+		connect_time = time(NULL);
+	}
+
+	res = ast_cdr_register(name, desc, mysql_log);
+	if (res) {
+		ast_log(LOG_ERROR, "Unable to register MySQL CDR handling\n");
+	} else {
+		res = ast_cli_register(&cdr_mysql_status_cli);
+	}
+
+	return res;
+}
+
+int load_module(void)
+{
+	return my_load_module();
+}
+
+int unload_module(void)
+{
+	return my_unload_module();
+}
+
+int reload(void)
+{
+	my_unload_module();
+	return my_load_module();
+}
+
+int usecount(void)
+{
+	/* Simplistic use count */
+	if (ast_mutex_trylock(&mysql_lock)) {
+		return 1;
+	} else {
+		ast_mutex_unlock(&mysql_lock);
+		return 0;
+	}
+}
+
+char *key()
+{
+	return ASTERISK_GPL_KEY;
+}
diff -ruN asterisk-1.0.7-orig/configs/cdr_mysql.conf.sample asterisk-1.0.7-2/configs/cdr_mysql.conf.sample
--- asterisk-1.0.7-orig/configs/cdr_mysql.conf.sample	1970-01-01 01:00:00.000000000 +0100
+++ asterisk-1.0.7-2/configs/cdr_mysql.conf.sample	2005-01-21 02:43:19.000000000 +0100
@@ -0,0 +1,21 @@
+;
+; Note - if the database server is hosted on the same machine as the
+; asterisk server, you can achieve a local Unix socket connection by
+; setting hostname=localhost
+;
+; port and sock are both optional parameters.  If hostname is specified
+; and is not "localhost", then cdr_mysql will attempt to connect to the
+; port specified or use the default port.  If hostname is not specified
+; or if hostname is "localhost", then cdr_mysql will attempt to connect
+; to the socket file specified by sock or otherwise use the default socket
+; file.
+;
+;[global]
+;hostname=database.host.name
+;dbname=asteriskcdrdb
+;table=cdr
+;password=password 
+;user=asteriskcdruser
+;port=3306
+;sock=/tmp/mysql.sock
+;userfield=1
