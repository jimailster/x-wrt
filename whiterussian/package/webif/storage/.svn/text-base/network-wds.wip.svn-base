#!/usr/bin/webif-page
<?
. "/usr/lib/webif/webif.sh"

load_settings "wireless"

header "Network" "WDS" "@TR<<WDS Configuration>>" ' onload="modechange()" ' "$SCRIPT_NAME"
ShowUntestedWarning

FORM_wds="${wl0_wds:-$(nvram get wl0_wds)}"
LISTVAL="$FORM_wds"
handle_list "$FORM_wdsremove" "$FORM_wdsadd" "$FORM_wdssubmit" 'mac|FORM_wdsadd|WDS MAC address|required' && {
	FORM_wds="$LISTVAL"
	save_setting wireless wl0_wds "$FORM_wds"
}
FORM_wdsadd=${FORM_wdsadd:-00:00:00:00:00:00}

if empty "$FORM_submit"; then
	FORM_wds_ssid=${wl0_wds_ssid:-$(nvram get wl0_wds_ssid)}
	FORM_lazywds=${wl0_lazywds:-$(nvram get wl0_lazywds)}
	FORM_wdstimeout=${wl0_wdstimeout:-$(nvram get wl0_wdstimeout)}
	akm=${wl0_wds_akm:-$(nvram get wl0_wds_akm)}
	case "$akm" in
		psk)
			FORM_wds_encryption=psk
			FORM_wds_wpa1=wpa1
			;;
		wpa)
			FORM_wds_encryption=wpa
			FORM_wds_wpa1=wpa1
			;;
		*)
			FORM_wds_wpa1=wpa1
			;;
	esac
	FORM_wds_wpa_psk=${wl0_wds_wpa_psk:-$(nvram get wl0_wds_wpa_psk)}
	FORM_radius_key=${wl0_radius_key:-$(nvram get wl0_radius_key)}
	FORM_radius_ipaddr=${wl0_wds_radius_ipaddr:-$(nvram get wl0_radius_ipaddr)}
	crypto=${wl0_wds_crypto:-$(nvram get wl0_wds_crypto)}
	case "$crypto" in
		tkip)
			FORM_wds_tkip=tkip
			;;
		aes)
			FORM_wds_aes=aes
			;;
		'tkip+aes'|'aes+tkip')
			FORM_wds_aes=aes
			FORM_wds_tkip=tkip
			;;
		*)
			FORM_wds_tkip=tkip
			;;
	esac
else
	SAVED=1
	validate <<EOF
string|FORM_wds_ssid|@TR<<ESSID>>|required|$FORM_wds_ssid
int|FORM_lazywds|@TR<<Lazy WDS On/Off>>|required min=0 max=1|$FORM_lazywds
int|FORM_wl0_distance|@TR<<Distance>>|min=0|$FORM_wl0_distance
int|FORM_wdstimeout|@TR<<WDS watchdog timeout>>|optional min=0 max=3600|$FORM_wdstimeout
ip|FORM_radius_ipaddr|@TR<<Radus>>||$FORM_radius_ipaddr
EOF
equal "$?" 0 && {
	save_setting wireless wl0_wds_ssid "$FORM_wds_ssid"
	save_setting wireless wl0_lazywds "$FORM_lazywds"
	save_setting wireless wl0_wdstimeout "$FORM_wdstimeout"
crypto=""
			equal "$FORM_wds_aes" aes && crypto="aes"
			equal "$FORM_wds_tkip" tkip && crypto="tkip${crypto:++$crypto}"
			save_setting wireless wl0_wds_crypto "$crypto"

			case "$FORM_wds_encryption" in
			psk)
				save_setting wireless wl0_wds_akm "psk"
				save_setting wireless wl0_wds_wpa_psk "$FORM_wds_wpa_psk"
				;;
			wpa)
				save_setting wireless wl0_wds_akm "wpa"
				save_setting wireless wl0_radius_ipaddr "$FORM_radius_ipaddr"
				save_setting wireless wl0_radius_key "$FORM_radius_key"
				;;
			off)
				save_setting wireless wl0_wds_akm ""
				;;
			esac
	}
fi

#####################################################################
# generate nas package field
#
nas_installed="0"
ipkg list_installed | grep -q nas
equal "$?" "0" && nas_installed="1"

install_nas_button='field|@TR<<NAS Package>>|install_nas|hidden'
if ! equal "$nas_installed" "1"; then
	install_nas_button="$install_nas_button
		string|<div class=\"warning\">WPA will not work until you install the NAS package. </div>
		submit|install_nas| Install NAS Package |"
else
	install_nas_button="$install_nas_button
		string|@TR<<Installed>>."
fi

#####################################################################
# modechange script
#
cat <<EOF
<script type="text/javascript" src="/webif.js"></script>
<script type="text/javascript">
<!--
function modechange()
{
	v = (isset('wds_encryption','wpa') || isset('wds_encryption','psk'));
	set_visible('wds_wpa_crypto', v);

	set_visible('wds_wpapsk', isset('wds_encryption','psk'));
	v = (isset('wds_encryption','psk') || isset('wds_encryption','wpa'));
	set_visible('install_nas', v);

	v = isset('wds_encryption','wpa');
	set_visible('radius_key', v);
	set_visible('radius_ip', v);

	hide('save');
	show('save');
}
-->
</script>

EOF

display_form <<EOF
onchange|modechange
start_form|@TR<<LAN Bridge WDS Connections>>
listedit|wds|$SCRIPT_NAME?|$FORM_wds|$FORM_wdsadd
end_form
start_form|@TR<<WDS Options>>

field|@TR<<WDS SSID>>
text|wds_ssid|$FORM_wds_ssid

field|@TR<<WDS watchdog timeout>>
text|wdstimeout|$FORM_wdstimeout

field|@TR<<Automatic WDS>>
select|lazywds|$FORM_lazywds
option|1|@TR<<Enabled>>
option|0|@TR<<Disabled>>

field|@TR<<Encryption Type>>
select|wds_encryption|$FORM_wds_encryption
option|off|@TR<<Disabled>>
option|psk|WPA (@TR<<PSK>>)
option|wpa|WPA (RADIUS)

helpitem|Encryption Type
helptext|HelpText Encryption Type#WPA2 is currently unsupported.

field|@TR<<WPA Algorithms>>|wds_wpa_crypto|hidden
checkbox|wds_tkip|$FORM_wds_tkip|tkip|RC4 (TKIP)
checkbox|wds_aes|$FORM_wds_aes|aes|AES

field|WPA @TR<<PSK>>|wds_wpapsk|hidden
password|wds_wpa_psk|$FORM_wds_wpa_psk

field|@TR<<RADIUS IP Address>>|radius_ip|hidden
text|radius_ipaddr|$FORM_radius_ipaddr

field|@TR<<RADIUS Server Key>>|radius_key|hidden
text|radius_key|$FORM_radius_key

$install_nas_button

end_form
EOF

footer ?>
<!--
##WEBIF:name:Network:415:WDS
-->